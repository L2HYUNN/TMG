/**
 * # 닌자 코드
 * 닌자라 불리던 전설 속 개발자들이 있었다(?)
 * 그들의 편법을 잠시나마 살펴보자.
 */

/**
 * ## 코드 짧게 쓰기
 * 가능한 한 코드를 짧게 써버린다.
 */

// 출처: 아주 유명한 라이브러리
i = i ? (i < 0 ? Math.max(0, len + i) : i) : 0;

/**
 * ## 글자 하나만 사용하기
 * 도는 숨어서 이름도 없지만, 오직 도만이 스스로를 잘 빌려주고 만물이 성하도록 돕는다. - 노자(도덕경)
 *
 * 코드를 짧게 썼던것 처럼 가능한 변수명도 짧게 쓴다.
 */

/**
 * ## 약어 사용하기
 * 변수명은 짧으면 짧을수록 좋으니 약어를 사용해 가능한 줄인다.
 *
 * list -> lst
 * userAgent -> ua
 * ...
 */

/**
 * ## 포괄적인 명사 사용하기
 * obj, data, value, item, elem 같은 다양한 개념을 포괄할 수 있는 명사를 마구 마구 쓴다. (이론상 완벽한 변수명)
 */

/**
 * ## 철자가 유사한 단어 사용하기
 * data, date...
 */

/**
 * ## 동의어 사용하기
 * 유사한 뜻을 가진 단어 여러 개를 같은 걸 명명하는데 사용한다.
 * displayMessage, showName 보여준다는 뜻이지만 다른 동사를 사용했다.
 *
 * 코드를 통해 풍부한 어휘력을 은은하게 드러내자..
 */

/**
 * ## 이름 재사용하기
 * 변수를 최대한 재활용하자
 *
 * 특히 함수나 반복문 중간에서 할당 값을 슬쩍(?) 바꾸면 더 좋다.
 */

function ninjaFunction(elem) {
  // 매개변수로 받아온 elem을 이용한 코드

  elem = clone(elem); // 극기 훈련용 코드(?)

  // elem의 복제(clone)본을 이용한 코드
}

/**
 * ## 재미로 언더스코어 사용하기
 * 이곳 저곳에 언더스코어를 사용해 팀원들을 혼란시키자.
 */

/**
 * ## 과장 형용사 사용하기
 * 닌자는 차고로 멋있어야 한다.
 *
 * 여러 형용사를 사용하여 닌자의 코드를 보여주자
 *
 * superElement, megaFrame, niceItem
 * 정말 멋지다. 하지만 특별한 의미는 없다.
 */

/**
 * ## 외부 변수 덮어쓰기
 * authenticateUser 함수를 읽고 있는 개발자를 혼란시키자.
 * 중간에 render 과정에서 슬쩍 user에 다른 함수를 덮어씌운다.
 *
 * 긴 랜더 함수에 그는 변경된 것을 놓치고 말 것이다.
 */

let user = authenticateUser();

function render() {
  let user = anotherValue();
  // ...
  // ...함수 길이가 긺...
  // ...
  // ... // <-- 개발자는 user와 관련된 이 부분의 코드를 수정해야 함
  // ...
}

/**
 * ## 부작용이 있는 코드 작성하기
 * 단순 확인용으로 사용되는 코드들에 여러 부작용을 추가해보자.
 *
 * 아니면 예상치 못한 결과값을 반환하는 것도 하나의 방법이다.
 */

/**
 * ## 함수에 다양한 기능 넣기
 * 압도적인 양의 큰 함수는 닌자의 힘을 보여준다.
 *
 * 함수 하나에 여러 기능을 욱여넣고 위에 배운 다양한 닌자 스킬을 이용해 아무도 이해할 수 없는 코드를 만들어보자.
 */

// 편법을 많이 사용하면 유지 보수하기가 힘들어져서 당신을 해고할 수 없게 됩니다(?)
