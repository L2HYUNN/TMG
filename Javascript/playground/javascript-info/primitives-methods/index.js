/**
 * # 원시값의 메서드
 * 자바스크립트는 원시값을 마치 객체처럼 다룰 수 있다.
 * 원시값에도 객체에서처럼 메서드를 호출할 수 있다.
 *
 * 하지만 원시값은 객체가 아니라는 것을 기억하자.
 *
 * 자바스크립트는 날짜, 오류, HTML 요소(HTML elemt) 등을 다룰 수 있게 해주는 다양한 내장 객체를 제공한다.
 * 이 객체들은 고유한 프로퍼티와 메서드를 가진다.
 *
 * 하지만 이러한 기능을 사용하면 시스템 자원이 많이 소모된다는 단점이 있다.
 * 객체는 원시값보다 "무겁고", 내부 구조를 유지하기 위해 추가 자원을 사용하기 때문이다.
 */

/**
 * ## 원시값을 객체처럼 사용하기
 * 원시값을 다루기 위해 메서드를 사용하면 작업을 수월하게 할 수 있다는 생각
 * -> 하지만 원시값은 가능한 한 빠르고 가벼워야 하기 떄문에 기존 객체의 메서드와 같은 방법을 사용할 수 없음
 * -> 따라서 아래와 같은 방법을 사용해 해결책을 모색함
 *
 * 1. 원시값은 원시값 그대로 남겨둬 단일 값 형태를 유지
 * 2. 문자열, 숫자, 불린, 심볼의 메서드와 프로퍼티에 접근할 수 있도록 허용
 * 3. 이를 언어적으로 가능하게 하기 위해, 원시값이 메서드나 프로퍼티에 접근하려 하면 추가 기능을 제공해주는 특수한 객체,
 * "원시 래퍼 객체(object wrapper)"를 만들어 준다.
 * 4. 사용된 래퍼 객체는 곧 삭제된다.
 *
 * "래퍼 객체"는 원시 타입에 따라 원시 자료형의 이름을 그대로 차용해
 * String, Number, Boolean, Symbol 라고 부른다.
 */

let str = "Hello";

alert(str.toUpperCase()); // HELLO

/**
 * str.toUpperCase()를 통해 원시값 메서드의 동작을 살펴보자.
 *
 * 1. 문자열 str은 원시값이므로 원시값의 프로퍼티(toUpperCase)에 접근하는 순간 특별한 객체(래퍼 객체)가 만들어진다.
 * (이 객체는 문자열의 값을 알고 있고, toUpperCase()와 같은 유용한 메서드를 가지고 있다.)
 * 2. 메서드가 실행되고, 새로운 문자열이 반환된다.
 * 3. 특별한 객체(래퍼 객체)는 파괴되고, 원시값 str만 남는다.
 */

/**
 * String/Number/Boolean를 생성자론 쓰지 말자.
 * Java 등의 몇몇 언어에선 new Number, new Boolean 등과 같은 문법을 통해 원하는 타입의 "래퍼 객체"를 직접 만들 수 있다.
 *
 * 자바스크립트에서도 하위 호완성을 위해 이 기능을 남겨 두었는데, 이런식의 래퍼 객체 생성은 추천되지 않는 방법이다.
 *
 * 아래와 같은 상황에서 혼동을 불러일으킬 수 있다.
 */

alert(typeof 0); // "number"

alert(typeof new Number(0)); // "object"!

let zero = new Number(0);

if (zero) {
  // 변수 zero는 객체이므로, 조건문이 참이 됩니다.
  alert("그런데 여러분은 zero가 참이라는 것에 동의하시나요!?!");
}

// new 없이 사용하는것은 괜찮다. 명시적 형 변환을 할 수 있다.
let num = Number("123"); // 문자열을 숫자로 바꿔줌

// null/undefined는 메서드가 없다.
alert(null.test); // error
