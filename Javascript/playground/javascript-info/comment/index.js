/**
 * # 주석
 * 주석(comment)은 어떻게 코드가 동작하는지, 왜 코드가 동작하는지를 설명하는 데 쓰인다.
 */

/**
 * ## 좋지 않은 주석
 * '설명이 담긴(explanatory)' 주석이 많아선 안된다.
 * 주석 없이 코드 자체만으로 코드가 무슨 일을 하는지 쉽게 이해할 수 있어야 한다.
 *
 * "코드가 불분명해서 주석 작성이 불가피하다면 코드를 다시 작성해야 하는 지경에 이른 걸 수 있다."
 */

/**
 * ### 리팩토링 팁: 함수 분리하기
 * 함수 내 코드 일부를 새로운 함수로 옮긴다.
 */

// 기존 함수
function showPrimes(n) {
  nextPrime: for (let i = 2; i < n; i++) {
    // i가 소수인지를 확인함
    for (let j = 2; j < i; j++) {
      if (i % j == 0) continue nextPrime;
    }

    alert(i);
  }
}

// 분리된 함수
function showPrimes(n) {
  for (let i = 2; i < n; i++) {
    if (!isPrime(i)) continue;

    alert(i);
  }
}

function isPrime(n) {
  // 함수 이름 자체가 주석 역할을 한다.
  // 이러한 코드를 자기 설명적인(self-descriptive) 코드라 부른다.
  for (let i = 2; i < n; i++) {
    if (n % i == 0) return false;
  }

  return true;
}

/**
 * ### 리팩토링 팁: 함수 만들기
 * 코드가 길어지는 경우 함수를 만드는 것 또한 하나의 방법이다.
 *
 * '설명이 담긴' 주석을 작성하는게 불가피한 경우도 있다.
 * 알고리즘이 복잡한 코드, 최적화를 위해 비틀어 작성할 때는 설명이 필요하다.
 *
 * 하지만 이러한 소수의 특별한 경우를 제외하고는 코드 자체만으로 설명이 가능하게 코딩해야한다.
 */

/**
 * ## 좋은 주석
 *
 * 1. 아키텍처를 설명하는 주석
 * 고차원 수준 컴포넌트 개요, 컴포넌트 간 상호작용에 대한 설명, 상황에 따른 제어 흐름 등은 주석에 넣는 게 좋다.
 * 이런 주석은 조감도 역할을 해준다.
 *
 * 2. 함수 용례와 매개변수 정보를 담고 있는 주석
 * JSDoc을 이용하여 함수에 관한 문서를 쉽게 작성할 수 있다.
 *
 * 함수 용례, 매개변수, 반환 값 정보가 들어가 코드를 읽지 않고도 함수의 목적과 사용법을 한눈에 알 수 있다.
 *
 * 3. 왜 이런 방법으로 문제를 해결했는지를 설명하는 주석
 * 해결 방법을 담고 있는 주석은 아주 중요한 역할을 한다.
 *
 * 이전에 했던 실수를 방지하는 안내판 역할을 하기 때문이다.
 * --> 나중에 다시 코드를 열어보았을 때 깊게 고민했던 문제를 주석을 통해 간단하게 살펴보고 빠르게 이해할 수 있게 된다.
 *
 * 4. 미묘한 기능이 있고, 이 기능이 어디에 쓰이는지를 설명하는 주석
 * 직감에 반하는 미묘한 동작을 수행하는 코드가 있다면 주석을 달아주는 게 좋다.
 */

// JSDoc을 이용한 주석

/**
 * x를 n번 곱한 수를 반환함
 *
 * @param {number} x 거듭제곱할 숫자
 * @param {number} n 곱할 횟수, 반드시 자연수여야 함
 * @return {number} x의 n 거듭제곱을 반환함
 */
function pow(x, n) {
  // ...
}
