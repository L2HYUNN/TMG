/**
 * # 기본 연산자와 수학
 * 수학과 관련 기본 연산자부터 자바스크립트에서만 제공하는 연산자에 대해서 배워보자.
 */

/**
 * ## 용어: '단항', '이항', '피연산자'
 * 피연산자(operand): 연산자가 연산을 수행하는 대상 (피연산자는 인수(argument)라는 용어로 불리기도 한다)
 * 단항 연산자(unary operator): 피연산자를 하나만 받는 연산자
 * 이항 연산자(binary operator): 두 개의 피연산자를 받는 연산자
 */

let x = 1;

x = -x;
alert(x); // -1, 여기서 -는 부호를 뒤집는 단항 연산자

let y = 3;
alert(y - x); // 4, 여기서 -는 뺄셈을 실행하는 이항 연산자

/**
 * ## 수학
 * 자바스크립트에서 지원하는 수학 연산자
 *
 * 덧셈 연산자 +,
 * 뺄셈 연산자 -,
 * 곱셈 연산자 *,
 * 나눗셈 연산자 /,
 * 나머지 연산자 %,
 * 거듭제곱 연산자 **
 */

/**
 * ## 나머지 연산자 %
 * 나머지 연산자(remainder operator)는 % 기호로 나타낸다.
 * a % b 는 a를 b로 나눈 후 그 나머지(remainder)를 정수로 반환해준다.
 */

alert(5 % 2); // 5를 2로 나눈 후의 나머지인 1을 출력
alert(8 % 3); // 8을 3으로 나눈 후의 나머지인 2를 출력

/**
 * ## 거듭제곱 연산자 **
 * 거듭제곱 연산자(exponentiation operator)는 ** 기호로 나타낸다.
 * a ** b 는 a를 b번 곱한 값을 반환해준다.
 */

alert(2 ** 2); // 4  (2 * 2)
alert(2 ** 3); // 8  (2 * 2 * 2)
alert(2 ** 4); // 16 (2 * 2 * 2 * 2)

alert(4 ** (1 / 2)); // 2 (1/2 거듭제곱은 제곱근)
alert(8 ** (1 / 3)); // 2 (1/3 거듭제곱은 세제곱근)

/**
 * ## 이항 연산자 '+'와 문자열 연결
 * 이항 연산자 +의 피연산자로 문자열이 전달되면 문자열을 병합(연결) 해준다.
 */

let s = "my" + "string";
alert(s); // mystring

// 연산이 어떻게 진행되는지 이해해보자
alert("1" + 2); // "12"
alert(2 + "1"); // "21"

alert(2 + 2 + "1"); // '221'이 아니라 '41'이 출력됩니다.

alert(6 - "2"); // 4, '2'를 숫자로 바꾼 후 연산이 진행됩니다.
alert("6" / "2"); // 3, 두 피연산자가 숫자로 바뀐 후 연산이 진행됩니다.

/**
 * ## 단항 연산자 +와 숫자형으로의 변환
 * 피연산자가 숫자가 아닌 경우 + 연산자를 통해 숫자형으로 변환할 수 있다.
 */

// 숫자에는 아무런 영향을 미치지 않습니다.
let x2 = 1;
alert(+x2); // 1

let y2 = -2;
alert(+y2); // -2

// 숫자형이 아닌 피연산자는 숫자형으로 변화합니다.
alert(+true); // 1
alert(+""); // 0

let apples = "2";
let oranges = "3";

alert(apples + oranges); // 23, 이항 덧셈 연산자는 문자열을 연결합니다.

// 이항 덧셈 연산자가 적용되기 전에, 두 피연산자는 숫자형으로 변화합니다.
alert(+apples + +oranges); // 5

// `Number(...)`를 사용해서 같은 동작을 하는 코드를 작성할 수 있지만, 더 기네요.
// alert( Number(apples) + Number(oranges) ); // 5

/**
 * ## 연산자 우선순위
 * 하나의 표현식에 둘 이상의 연산자가 있는 경우, 실행 순서는 연산자의 우선순위(precedence)에 의해 결정된다.
 *
 * 우선순위를 모두 외우기 보다 필요한 부분에 괄호를 사용하자.
 * 괄호는 모든 연산자보다 우선순위가 높다.
 *
 * 동일한 기호의 단항 연산자는 이항 연산자보다 우선순위가 더 높다.
 */

/**
 * ## 할당 연산자
 * 할당(assignment) 연산자는 = 기호로 나타낸다.
 * 무언가를 할당할 때 사용한다.
 */

let x3 = 2 * 2 + 1;
alert(x3); // 5;

/**
 * ### 값을 반환하는 할당 연산자
 * 자바스크립트에서는 대부분의 연산자들이 값을 반환한다.
 * 할당 연산자 또한 값을 반환하는 연산자 중 하나이다.
 */

let a = 1;
let b = 2;

let c = 3 - (a = b + 1);

alert(a); // 3
alert(c); // 0

/**
 * ### 할당 연산자 체이닝
 * 할당 연산자는 아래와 같이 여러 개를 연결하여 사용할 수도 있다(체이닝).
 */

let a1, b1, c1;

a1 = b1 = c1 = 2 + 2; // 하지만 가독성을 위해서는 따로 따로 작성해주는 편이 좋다.

alert(a1); // 4
alert(b1); // 4
alert(c1); // 4

/**
 * ### 복합 할당 연산자
 * 변수에 연산자를 적용하고 그 결과를 같은 변수에 저장해야 하는 경우 복합 할당 연산자를 사용할 수 있다.
 */

let n = 2;
n += 5; // n은 7이 됩니다(n = n + 5와 동일).
n *= 2; // n은 14가 됩니다(n = n * 2와 동일).

alert(n); // 14

let n1 = 2;

n1 *= 3 + 5;

alert(n1); // 16  (*=의 우측이 먼저 평가되므로, 위 식은 n *= 8과 동일합니다.)

/**
 * ## 증가, 감소 연산자
 * 숫자를 하나 늘리거나 줄일 때 증감 연산자를 사용할 수 있다.
 *
 * 증가(increment)연산자 ++는 변수를 1 증가시킨다.
 * 감소(decrement)연산자 --는 변수를 1 감소시킨다.
 */

let counter = 2;
counter++; // counter = counter + 1과 동일하게 동작합니다. 하지만 식은 더 짧습니다.
alert(counter); // 3

let counter2 = 2;
counter2--; // counter = counter - 1과 동일하게 동작합니다. 하지만 식은 더 짧습니다.
alert(counter2); // 1

/**
 * 증가, 감소 연산자의 위치
 *
 * 증가, 감소 연산자는 변수 앞이나 뒤에 올 수 있다.
 *
 * ++counter와 같이 피연산자 앞에 올 때는, '전위형(prefix form)'이라고 부른다.
 * counter++와 같이 피연산자 뒤에 올 때는, '후위형(postfix form)'이라고 부른다.
 *
 * 전위형(prefix form)은 증가, 감소 후의 새로운 값을 반환한다.
 * 후위형(postfix form)은 기존 값을 반환한 이후 증감이 이뤄진다.
 */

let counter3 = 1;
let a3 = ++counter3; // (*)

alert(a3); // 2

let counter4 = 1;
let a4 = counter4++; // (*) ++counter를 counter++로 바꿈

alert(a4); // 1

// 다른 연산자 사이의 증가, 감소 연산자
let counter5 = 1;
alert(2 * counter5++); // 한 줄에서 여러 가지 일을 동시에 하고 있기 때문에 코드의 가독성이 떨어진다.

// 아래와 같이, '코드 한 줄엔, 특정 동작 하나'에 관련된 내용만 작성하는 것이 좋다.
let counter6 = 1;
alert(2 * counter6);
counter6++;

/**
 * ## 비트 연산자
 * 비트(bitwise) 연산자는 인수를 32비트 정수로 변환하여 이진 연산을 수행한다.
 *
 * 비트 연산 시 쓰이는 연산자 목록은 다음과 같다
 * 비트 AND ( & )
 * 비트 OR ( | )
 * 비트 XOR ( ^ )
 * 비트 NOT ( ~ )
 * 왼쪽 시프트(LEFT SHIFT) ( << )
 * 오른쪽 시프트(RIGHT SHIFT) ( >> )
 * 부호 없는 오른쪽 시프트(ZERO-FILL RIGHT SHIFT) ( >>> )
 *
 * 웹 개발시에 자주 사용되지는 않지만 암호를 다뤄야 할 땐 유용하다.
 */

/**
 * ## 쉼표 연산자
 * 쉼표(comma) 연산자는 여러 표현식을 코드 한 줄에서 평가할 수 있게 해준다.
 * 이때 표현식 각각이 모두 평가되지만, 마지막 표현식의 평가 결과만 반환된다.
 */

let a5 = (1 + 2, 3 + 4);
alert(a5); // 7 (3 + 4의 결과)
// 1 + 2은 평가가 되었지만 그 결과가 버려졌다.

// 쉼표 연산자의 연산자 우선순위는 할당 연산자 = 보다 낫기 때문에 괄호를 적절히 사용해주어야한다.

// a = 1 + 2, 3 + 4의 경우 a = 3, 7이 된다.
// 할당 연산자가 쉼표 연산자보다 우선 순위가 높기 때문에 a = 3이 실행되고 7은 무시된다.
